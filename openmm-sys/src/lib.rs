/* automatically generated by rust-bindgen 0.54.1 */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const OpenMM_NmPerAngstrom: f64 = 0.1;
pub const OpenMM_AngstromsPerNm: f64 = 10.0;
pub const OpenMM_PsPerFs: f64 = 0.001;
pub const OpenMM_FsPerPs: f64 = 1000.0;
pub const OpenMM_KJPerKcal: f64 = 4.184;
pub const OpenMM_KcalPerKJ: f64 = 0.2390057361376673;
pub const OpenMM_RadiansPerDegree: f64 = 0.017453292519943295;
pub const OpenMM_DegreesPerRadian: f64 = 57.29577951308232;
pub const OpenMM_SigmaPerVdwRadius: f64 = 1.7817974362806785;
pub const OpenMM_VdwRadiusPerSigma: f64 = 0.5612310241546865;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Context_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Context = OpenMM_Context_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_TabulatedFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_TabulatedFunction = OpenMM_TabulatedFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Discrete2DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Discrete2DFunction = OpenMM_Discrete2DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Force_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Force = OpenMM_Force_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomAngleForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomAngleForce = OpenMM_CustomAngleForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomNonbondedForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomNonbondedForce = OpenMM_CustomNonbondedForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_AndersenThermostat_struct {
    _unused: [u8; 0],
}
pub type OpenMM_AndersenThermostat = OpenMM_AndersenThermostat_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_VirtualSite_struct {
    _unused: [u8; 0],
}
pub type OpenMM_VirtualSite = OpenMM_VirtualSite_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_ThreeParticleAverageSite_struct {
    _unused: [u8; 0],
}
pub type OpenMM_ThreeParticleAverageSite = OpenMM_ThreeParticleAverageSite_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomHbondForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomHbondForce = OpenMM_CustomHbondForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Continuous1DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Continuous1DFunction = OpenMM_Continuous1DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Discrete3DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Discrete3DFunction = OpenMM_Discrete3DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_OpenMMException_struct {
    _unused: [u8; 0],
}
pub type OpenMM_OpenMMException = OpenMM_OpenMMException_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_MonteCarloBarostat_struct {
    _unused: [u8; 0],
}
pub type OpenMM_MonteCarloBarostat = OpenMM_MonteCarloBarostat_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_GayBerneForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_GayBerneForce = OpenMM_GayBerneForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_TwoParticleAverageSite_struct {
    _unused: [u8; 0],
}
pub type OpenMM_TwoParticleAverageSite = OpenMM_TwoParticleAverageSite_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_LocalCoordinatesSite_struct {
    _unused: [u8; 0],
}
pub type OpenMM_LocalCoordinatesSite = OpenMM_LocalCoordinatesSite_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomBondForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomBondForce = OpenMM_CustomBondForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_State_struct {
    _unused: [u8; 0],
}
pub type OpenMM_State = OpenMM_State_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_HarmonicAngleForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_HarmonicAngleForce = OpenMM_HarmonicAngleForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomManyParticleForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomManyParticleForce = OpenMM_CustomManyParticleForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Integrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Integrator = OpenMM_Integrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_VariableVerletIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_VariableVerletIntegrator = OpenMM_VariableVerletIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_MonteCarloMembraneBarostat_struct {
    _unused: [u8; 0],
}
pub type OpenMM_MonteCarloMembraneBarostat = OpenMM_MonteCarloMembraneBarostat_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_MonteCarloAnisotropicBarostat_struct {
    _unused: [u8; 0],
}
pub type OpenMM_MonteCarloAnisotropicBarostat = OpenMM_MonteCarloAnisotropicBarostat_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomCVForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomCVForce = OpenMM_CustomCVForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_NonbondedForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_NonbondedForce = OpenMM_NonbondedForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_PeriodicTorsionForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_PeriodicTorsionForce = OpenMM_PeriodicTorsionForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_BrownianIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_BrownianIntegrator = OpenMM_BrownianIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_GBSAOBCForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_GBSAOBCForce = OpenMM_GBSAOBCForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_VerletIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_VerletIntegrator = OpenMM_VerletIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_LocalEnergyMinimizer_struct {
    _unused: [u8; 0],
}
pub type OpenMM_LocalEnergyMinimizer = OpenMM_LocalEnergyMinimizer_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_LangevinIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_LangevinIntegrator = OpenMM_LangevinIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_VariableLangevinIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_VariableLangevinIntegrator = OpenMM_VariableLangevinIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomIntegrator = OpenMM_CustomIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_RBTorsionForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_RBTorsionForce = OpenMM_RBTorsionForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CompoundIntegrator_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CompoundIntegrator = OpenMM_CompoundIntegrator_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_System_struct {
    _unused: [u8; 0],
}
pub type OpenMM_System = OpenMM_System_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomCompoundBondForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomCompoundBondForce = OpenMM_CustomCompoundBondForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomCentroidBondForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomCentroidBondForce = OpenMM_CustomCentroidBondForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CMAPTorsionForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CMAPTorsionForce = OpenMM_CMAPTorsionForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Continuous3DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Continuous3DFunction = OpenMM_Continuous3DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_OutOfPlaneSite_struct {
    _unused: [u8; 0],
}
pub type OpenMM_OutOfPlaneSite = OpenMM_OutOfPlaneSite_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Discrete1DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Discrete1DFunction = OpenMM_Discrete1DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomTorsionForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomTorsionForce = OpenMM_CustomTorsionForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_HarmonicBondForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_HarmonicBondForce = OpenMM_HarmonicBondForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomGBForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomGBForce = OpenMM_CustomGBForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_RMSDForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_RMSDForce = OpenMM_RMSDForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CustomExternalForce_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CustomExternalForce = OpenMM_CustomExternalForce_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Continuous2DFunction_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Continuous2DFunction = OpenMM_Continuous2DFunction_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_CMMotionRemover_struct {
    _unused: [u8; 0],
}
pub type OpenMM_CMMotionRemover = OpenMM_CMMotionRemover_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Platform_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Platform = OpenMM_Platform_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Vec3Array_struct {
    _unused: [u8; 0],
}
pub type OpenMM_Vec3Array = OpenMM_Vec3Array_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_StringArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_StringArray = OpenMM_StringArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_BondArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_BondArray = OpenMM_BondArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_ParameterArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_ParameterArray = OpenMM_ParameterArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_PropertyArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_PropertyArray = OpenMM_PropertyArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_DoubleArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_DoubleArray = OpenMM_DoubleArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_IntArray_struct {
    _unused: [u8; 0],
}
pub type OpenMM_IntArray = OpenMM_IntArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_IntSet_struct {
    _unused: [u8; 0],
}
pub type OpenMM_IntSet = OpenMM_IntSet_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenMM_Vec3 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_OpenMM_Vec3() {
    assert_eq!(
        ::std::mem::size_of::<OpenMM_Vec3>(),
        24usize,
        concat!("Size of: ", stringify!(OpenMM_Vec3))
    );
    assert_eq!(
        ::std::mem::align_of::<OpenMM_Vec3>(),
        8usize,
        concat!("Alignment of ", stringify!(OpenMM_Vec3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpenMM_Vec3>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OpenMM_Vec3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpenMM_Vec3>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OpenMM_Vec3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OpenMM_Vec3>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OpenMM_Vec3),
            "::",
            stringify!(z)
        )
    );
}
pub const OpenMM_Boolean_OpenMM_False: OpenMM_Boolean = 0;
pub const OpenMM_Boolean_OpenMM_True: OpenMM_Boolean = 1;
pub type OpenMM_Boolean = u32;
extern "C" {
    pub fn OpenMM_Vec3_scale(vec: OpenMM_Vec3, scale: f64) -> OpenMM_Vec3;
}
extern "C" {
    pub fn OpenMM_Vec3Array_create(size: ::std::os::raw::c_int) -> *mut OpenMM_Vec3Array;
}
extern "C" {
    pub fn OpenMM_Vec3Array_destroy(array: *mut OpenMM_Vec3Array);
}
extern "C" {
    pub fn OpenMM_Vec3Array_getSize(array: *const OpenMM_Vec3Array) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_Vec3Array_resize(array: *mut OpenMM_Vec3Array, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_Vec3Array_append(array: *mut OpenMM_Vec3Array, vec: OpenMM_Vec3);
}
extern "C" {
    pub fn OpenMM_Vec3Array_set(
        array: *mut OpenMM_Vec3Array,
        index: ::std::os::raw::c_int,
        vec: OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_Vec3Array_get(
        array: *const OpenMM_Vec3Array,
        index: ::std::os::raw::c_int,
    ) -> *const OpenMM_Vec3;
}
extern "C" {
    pub fn OpenMM_StringArray_create(size: ::std::os::raw::c_int) -> *mut OpenMM_StringArray;
}
extern "C" {
    pub fn OpenMM_StringArray_destroy(array: *mut OpenMM_StringArray);
}
extern "C" {
    pub fn OpenMM_StringArray_getSize(array: *const OpenMM_StringArray) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_StringArray_resize(array: *mut OpenMM_StringArray, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_StringArray_append(
        array: *mut OpenMM_StringArray,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_StringArray_set(
        array: *mut OpenMM_StringArray,
        index: ::std::os::raw::c_int,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_StringArray_get(
        array: *const OpenMM_StringArray,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_BondArray_create(size: ::std::os::raw::c_int) -> *mut OpenMM_BondArray;
}
extern "C" {
    pub fn OpenMM_BondArray_destroy(array: *mut OpenMM_BondArray);
}
extern "C" {
    pub fn OpenMM_BondArray_getSize(array: *const OpenMM_BondArray) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_BondArray_resize(array: *mut OpenMM_BondArray, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_BondArray_append(
        array: *mut OpenMM_BondArray,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_BondArray_set(
        array: *mut OpenMM_BondArray,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_BondArray_get(
        array: *const OpenMM_BondArray,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_ParameterArray_getSize(
        array: *const OpenMM_ParameterArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_ParameterArray_get(
        array: *const OpenMM_ParameterArray,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_PropertyArray_getSize(
        array: *const OpenMM_PropertyArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_PropertyArray_get(
        array: *const OpenMM_PropertyArray,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_DoubleArray_create(size: ::std::os::raw::c_int) -> *mut OpenMM_DoubleArray;
}
extern "C" {
    pub fn OpenMM_DoubleArray_destroy(array: *mut OpenMM_DoubleArray);
}
extern "C" {
    pub fn OpenMM_DoubleArray_getSize(array: *const OpenMM_DoubleArray) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_DoubleArray_resize(array: *mut OpenMM_DoubleArray, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_DoubleArray_append(array: *mut OpenMM_DoubleArray, value: f64);
}
extern "C" {
    pub fn OpenMM_DoubleArray_set(
        array: *mut OpenMM_DoubleArray,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn OpenMM_DoubleArray_get(
        array: *const OpenMM_DoubleArray,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_IntArray_create(size: ::std::os::raw::c_int) -> *mut OpenMM_IntArray;
}
extern "C" {
    pub fn OpenMM_IntArray_destroy(array: *mut OpenMM_IntArray);
}
extern "C" {
    pub fn OpenMM_IntArray_getSize(array: *const OpenMM_IntArray) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_IntArray_resize(array: *mut OpenMM_IntArray, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_IntArray_append(array: *mut OpenMM_IntArray, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_IntArray_set(
        array: *mut OpenMM_IntArray,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_IntArray_get(
        array: *const OpenMM_IntArray,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_IntSet_create() -> *mut OpenMM_IntSet;
}
extern "C" {
    pub fn OpenMM_IntSet_destroy(set: *mut OpenMM_IntSet);
}
extern "C" {
    pub fn OpenMM_IntSet_getSize(set: *const OpenMM_IntSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_IntSet_insert(set: *mut OpenMM_IntSet, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_Context_getState(
        target: *const OpenMM_Context,
        types: ::std::os::raw::c_int,
        enforcePeriodicBox: ::std::os::raw::c_int,
    ) -> *mut OpenMM_State;
}
extern "C" {
    pub fn OpenMM_Context_getState_2(
        target: *const OpenMM_Context,
        types: ::std::os::raw::c_int,
        enforcePeriodicBox: ::std::os::raw::c_int,
        groups: ::std::os::raw::c_int,
    ) -> *mut OpenMM_State;
}
extern "C" {
    pub fn OpenMM_Platform_loadPluginsFromDirectory(
        directory: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_StringArray;
}
extern "C" {
    pub fn OpenMM_Platform_getPluginLoadFailures() -> *mut OpenMM_StringArray;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_serializeSystem(
        system: *const OpenMM_System,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_serializeState(
        state: *const OpenMM_State,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_serializeIntegrator(
        integrator: *const OpenMM_Integrator,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_deserializeSystem(
        xml: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_System;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_deserializeState(
        xml: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_State;
}
extern "C" {
    pub fn OpenMM_XmlSerializer_deserializeIntegrator(
        xml: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_Integrator;
}
extern "C" {
    pub fn OpenMM_Context_create(
        system: *const OpenMM_System,
        integrator: *mut OpenMM_Integrator,
    ) -> *mut OpenMM_Context;
}
extern "C" {
    pub fn OpenMM_Context_create_2(
        system: *const OpenMM_System,
        integrator: *mut OpenMM_Integrator,
        platform: *mut OpenMM_Platform,
    ) -> *mut OpenMM_Context;
}
extern "C" {
    pub fn OpenMM_Context_create_3(
        system: *const OpenMM_System,
        integrator: *mut OpenMM_Integrator,
        platform: *mut OpenMM_Platform,
        properties: *const OpenMM_PropertyArray,
    ) -> *mut OpenMM_Context;
}
extern "C" {
    pub fn OpenMM_Context_destroy(target: *mut OpenMM_Context);
}
extern "C" {
    pub fn OpenMM_Context_getSystem(target: *const OpenMM_Context) -> *const OpenMM_System;
}
extern "C" {
    pub fn OpenMM_Context_getIntegrator(target: *mut OpenMM_Context) -> *mut OpenMM_Integrator;
}
extern "C" {
    pub fn OpenMM_Context_getPlatform(target: *mut OpenMM_Context) -> *mut OpenMM_Platform;
}
extern "C" {
    pub fn OpenMM_Context_setState(target: *mut OpenMM_Context, state: *const OpenMM_State);
}
extern "C" {
    pub fn OpenMM_Context_setTime(target: *mut OpenMM_Context, time: f64);
}
extern "C" {
    pub fn OpenMM_Context_setPositions(
        target: *mut OpenMM_Context,
        positions: *const OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_Context_setVelocities(
        target: *mut OpenMM_Context,
        velocities: *const OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_Context_setVelocitiesToTemperature(
        target: *mut OpenMM_Context,
        temperature: f64,
        randomSeed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_Context_getParameters(
        target: *const OpenMM_Context,
    ) -> *const OpenMM_ParameterArray;
}
extern "C" {
    pub fn OpenMM_Context_getParameter(
        target: *const OpenMM_Context,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_Context_setParameter(
        target: *mut OpenMM_Context,
        name: *const ::std::os::raw::c_char,
        value: f64,
    );
}
extern "C" {
    pub fn OpenMM_Context_setPeriodicBoxVectors(
        target: *mut OpenMM_Context,
        a: *const OpenMM_Vec3,
        b: *const OpenMM_Vec3,
        c: *const OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_Context_applyConstraints(target: *mut OpenMM_Context, tol: f64);
}
extern "C" {
    pub fn OpenMM_Context_applyVelocityConstraints(target: *mut OpenMM_Context, tol: f64);
}
extern "C" {
    pub fn OpenMM_Context_computeVirtualSites(target: *mut OpenMM_Context);
}
extern "C" {
    pub fn OpenMM_Context_reinitialize(target: *mut OpenMM_Context, preserveState: OpenMM_Boolean);
}
extern "C" {
    pub fn OpenMM_TabulatedFunction_destroy(target: *mut OpenMM_TabulatedFunction);
}
extern "C" {
    pub fn OpenMM_TabulatedFunction_Copy(
        target: *const OpenMM_TabulatedFunction,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_Discrete2DFunction_create(
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
    ) -> *mut OpenMM_Discrete2DFunction;
}
extern "C" {
    pub fn OpenMM_Discrete2DFunction_destroy(target: *mut OpenMM_Discrete2DFunction);
}
extern "C" {
    pub fn OpenMM_Discrete2DFunction_getFunctionParameters(
        target: *const OpenMM_Discrete2DFunction,
        xsize: *mut ::std::os::raw::c_int,
        ysize: *mut ::std::os::raw::c_int,
        values: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete2DFunction_setFunctionParameters(
        target: *mut OpenMM_Discrete2DFunction,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete2DFunction_Copy(
        target: *const OpenMM_Discrete2DFunction,
    ) -> *mut OpenMM_Discrete2DFunction;
}
extern "C" {
    pub fn OpenMM_Force_destroy(target: *mut OpenMM_Force);
}
extern "C" {
    pub fn OpenMM_Force_getForceGroup(target: *const OpenMM_Force) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_Force_setForceGroup(target: *mut OpenMM_Force, group: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_Force_usesPeriodicBoundaryConditions(
        target: *const OpenMM_Force,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomAngleForce;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_destroy(target: *mut OpenMM_CustomAngleForce);
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getNumAngles(
        target: *const OpenMM_CustomAngleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getNumPerAngleParameters(
        target: *const OpenMM_CustomAngleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getNumGlobalParameters(
        target: *const OpenMM_CustomAngleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomAngleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getEnergyFunction(
        target: *const OpenMM_CustomAngleForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setEnergyFunction(
        target: *mut OpenMM_CustomAngleForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_addPerAngleParameter(
        target: *mut OpenMM_CustomAngleForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getPerAngleParameterName(
        target: *const OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setPerAngleParameterName(
        target: *mut OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_addGlobalParameter(
        target: *mut OpenMM_CustomAngleForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getGlobalParameterName(
        target: *const OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setGlobalParameterName(
        target: *mut OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomAngleForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_addAngle(
        target: *mut OpenMM_CustomAngleForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_getAngleParameters(
        target: *const OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        particle3: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setAngleParameters(
        target: *mut OpenMM_CustomAngleForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_updateParametersInContext(
        target: *mut OpenMM_CustomAngleForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CustomAngleForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomAngleForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomAngleForce,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_CustomNonbondedForce_NonbondedMethod_OpenMM_CustomNonbondedForce_NoCutoff:
    OpenMM_CustomNonbondedForce_NonbondedMethod = 0;
pub const OpenMM_CustomNonbondedForce_NonbondedMethod_OpenMM_CustomNonbondedForce_CutoffNonPeriodic : OpenMM_CustomNonbondedForce_NonbondedMethod = 1 ;
pub const OpenMM_CustomNonbondedForce_NonbondedMethod_OpenMM_CustomNonbondedForce_CutoffPeriodic:
    OpenMM_CustomNonbondedForce_NonbondedMethod = 2;
pub type OpenMM_CustomNonbondedForce_NonbondedMethod = u32;
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomNonbondedForce;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_create_2(
        rhs: *const OpenMM_CustomNonbondedForce,
    ) -> *mut OpenMM_CustomNonbondedForce;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_destroy(target: *mut OpenMM_CustomNonbondedForce);
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumParticles(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumExclusions(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumPerParticleParameters(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumGlobalParameters(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumFunctions(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumInteractionGroups(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getEnergyFunction(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setEnergyFunction(
        target: *mut OpenMM_CustomNonbondedForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getNonbondedMethod(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> OpenMM_CustomNonbondedForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setNonbondedMethod(
        target: *mut OpenMM_CustomNonbondedForce,
        method: OpenMM_CustomNonbondedForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getCutoffDistance(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setCutoffDistance(
        target: *mut OpenMM_CustomNonbondedForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getUseSwitchingFunction(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setUseSwitchingFunction(
        target: *mut OpenMM_CustomNonbondedForce,
        use_: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getSwitchingDistance(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setSwitchingDistance(
        target: *mut OpenMM_CustomNonbondedForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getUseLongRangeCorrection(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setUseLongRangeCorrection(
        target: *mut OpenMM_CustomNonbondedForce,
        use_: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addPerParticleParameter(
        target: *mut OpenMM_CustomNonbondedForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getPerParticleParameterName(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setPerParticleParameterName(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addGlobalParameter(
        target: *mut OpenMM_CustomNonbondedForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getGlobalParameterName(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setGlobalParameterName(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomNonbondedForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addParticle(
        target: *mut OpenMM_CustomNonbondedForce,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getParticleParameters(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setParticleParameters(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addExclusion(
        target: *mut OpenMM_CustomNonbondedForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getExclusionParticles(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setExclusionParticles(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_createExclusionsFromBonds(
        target: *mut OpenMM_CustomNonbondedForce,
        bonds: *const OpenMM_BondArray,
        bondCutoff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addTabulatedFunction(
        target: *mut OpenMM_CustomNonbondedForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getTabulatedFunction(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addFunction(
        target: *mut OpenMM_CustomNonbondedForce,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getFunctionParameters(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        values: *mut OpenMM_DoubleArray,
        min: *mut f64,
        max: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setFunctionParameters(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_addInteractionGroup(
        target: *mut OpenMM_CustomNonbondedForce,
        set1: *const OpenMM_IntSet,
        set2: *const OpenMM_IntSet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_getInteractionGroupParameters(
        target: *const OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        set1: *mut OpenMM_IntSet,
        set2: *mut OpenMM_IntSet,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_setInteractionGroupParameters(
        target: *mut OpenMM_CustomNonbondedForce,
        index: ::std::os::raw::c_int,
        set1: *const OpenMM_IntSet,
        set2: *const OpenMM_IntSet,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_updateParametersInContext(
        target: *mut OpenMM_CustomNonbondedForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomNonbondedForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomNonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_create(
        defaultTemperature: f64,
        defaultCollisionFrequency: f64,
    ) -> *mut OpenMM_AndersenThermostat;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_destroy(target: *mut OpenMM_AndersenThermostat);
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_Temperature() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_CollisionFrequency() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_getDefaultTemperature(
        target: *const OpenMM_AndersenThermostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_setDefaultTemperature(
        target: *mut OpenMM_AndersenThermostat,
        temperature: f64,
    );
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_getDefaultCollisionFrequency(
        target: *const OpenMM_AndersenThermostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_setDefaultCollisionFrequency(
        target: *mut OpenMM_AndersenThermostat,
        frequency: f64,
    );
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_getRandomNumberSeed(
        target: *const OpenMM_AndersenThermostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_setRandomNumberSeed(
        target: *mut OpenMM_AndersenThermostat,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_AndersenThermostat_usesPeriodicBoundaryConditions(
        target: *const OpenMM_AndersenThermostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_VirtualSite_destroy(target: *mut OpenMM_VirtualSite);
}
extern "C" {
    pub fn OpenMM_VirtualSite_getNumParticles(
        target: *const OpenMM_VirtualSite,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_VirtualSite_getParticle(
        target: *const OpenMM_VirtualSite,
        particle: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_ThreeParticleAverageSite_create(
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        weight1: f64,
        weight2: f64,
        weight3: f64,
    ) -> *mut OpenMM_ThreeParticleAverageSite;
}
extern "C" {
    pub fn OpenMM_ThreeParticleAverageSite_destroy(target: *mut OpenMM_ThreeParticleAverageSite);
}
extern "C" {
    pub fn OpenMM_ThreeParticleAverageSite_getWeight(
        target: *const OpenMM_ThreeParticleAverageSite,
        particle: ::std::os::raw::c_int,
    ) -> f64;
}
pub const OpenMM_CustomHbondForce_NonbondedMethod_OpenMM_CustomHbondForce_NoCutoff:
    OpenMM_CustomHbondForce_NonbondedMethod = 0;
pub const OpenMM_CustomHbondForce_NonbondedMethod_OpenMM_CustomHbondForce_CutoffNonPeriodic:
    OpenMM_CustomHbondForce_NonbondedMethod = 1;
pub const OpenMM_CustomHbondForce_NonbondedMethod_OpenMM_CustomHbondForce_CutoffPeriodic:
    OpenMM_CustomHbondForce_NonbondedMethod = 2;
pub type OpenMM_CustomHbondForce_NonbondedMethod = u32;
extern "C" {
    pub fn OpenMM_CustomHbondForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomHbondForce;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_destroy(target: *mut OpenMM_CustomHbondForce);
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumDonors(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumAcceptors(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumExclusions(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumPerDonorParameters(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumPerAcceptorParameters(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumGlobalParameters(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNumFunctions(
        target: *const OpenMM_CustomHbondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getEnergyFunction(
        target: *const OpenMM_CustomHbondForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setEnergyFunction(
        target: *mut OpenMM_CustomHbondForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getNonbondedMethod(
        target: *const OpenMM_CustomHbondForce,
    ) -> OpenMM_CustomHbondForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setNonbondedMethod(
        target: *mut OpenMM_CustomHbondForce,
        method: OpenMM_CustomHbondForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getCutoffDistance(target: *const OpenMM_CustomHbondForce)
        -> f64;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setCutoffDistance(
        target: *mut OpenMM_CustomHbondForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addPerDonorParameter(
        target: *mut OpenMM_CustomHbondForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getPerDonorParameterName(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setPerDonorParameterName(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addPerAcceptorParameter(
        target: *mut OpenMM_CustomHbondForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getPerAcceptorParameterName(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setPerAcceptorParameterName(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addGlobalParameter(
        target: *mut OpenMM_CustomHbondForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getGlobalParameterName(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setGlobalParameterName(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addDonor(
        target: *mut OpenMM_CustomHbondForce,
        d1: ::std::os::raw::c_int,
        d2: ::std::os::raw::c_int,
        d3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getDonorParameters(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        d1: *mut ::std::os::raw::c_int,
        d2: *mut ::std::os::raw::c_int,
        d3: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setDonorParameters(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        d2: ::std::os::raw::c_int,
        d3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addAcceptor(
        target: *mut OpenMM_CustomHbondForce,
        a1: ::std::os::raw::c_int,
        a2: ::std::os::raw::c_int,
        a3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getAcceptorParameters(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        a1: *mut ::std::os::raw::c_int,
        a2: *mut ::std::os::raw::c_int,
        a3: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setAcceptorParameters(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        a1: ::std::os::raw::c_int,
        a2: ::std::os::raw::c_int,
        a3: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addExclusion(
        target: *mut OpenMM_CustomHbondForce,
        donor: ::std::os::raw::c_int,
        acceptor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getExclusionParticles(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        donor: *mut ::std::os::raw::c_int,
        acceptor: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setExclusionParticles(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        donor: ::std::os::raw::c_int,
        acceptor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addTabulatedFunction(
        target: *mut OpenMM_CustomHbondForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getTabulatedFunction(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_addFunction(
        target: *mut OpenMM_CustomHbondForce,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_getFunctionParameters(
        target: *const OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        values: *mut OpenMM_DoubleArray,
        min: *mut f64,
        max: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_setFunctionParameters(
        target: *mut OpenMM_CustomHbondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_updateParametersInContext(
        target: *mut OpenMM_CustomHbondForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomHbondForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomHbondForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Continuous1DFunction_create(
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    ) -> *mut OpenMM_Continuous1DFunction;
}
extern "C" {
    pub fn OpenMM_Continuous1DFunction_destroy(target: *mut OpenMM_Continuous1DFunction);
}
extern "C" {
    pub fn OpenMM_Continuous1DFunction_getFunctionParameters(
        target: *const OpenMM_Continuous1DFunction,
        values: *mut OpenMM_DoubleArray,
        min: *mut f64,
        max: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous1DFunction_setFunctionParameters(
        target: *mut OpenMM_Continuous1DFunction,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous1DFunction_Copy(
        target: *const OpenMM_Continuous1DFunction,
    ) -> *mut OpenMM_Continuous1DFunction;
}
extern "C" {
    pub fn OpenMM_Discrete3DFunction_create(
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        zsize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
    ) -> *mut OpenMM_Discrete3DFunction;
}
extern "C" {
    pub fn OpenMM_Discrete3DFunction_destroy(target: *mut OpenMM_Discrete3DFunction);
}
extern "C" {
    pub fn OpenMM_Discrete3DFunction_getFunctionParameters(
        target: *const OpenMM_Discrete3DFunction,
        xsize: *mut ::std::os::raw::c_int,
        ysize: *mut ::std::os::raw::c_int,
        zsize: *mut ::std::os::raw::c_int,
        values: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete3DFunction_setFunctionParameters(
        target: *mut OpenMM_Discrete3DFunction,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        zsize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete3DFunction_Copy(
        target: *const OpenMM_Discrete3DFunction,
    ) -> *mut OpenMM_Discrete3DFunction;
}
extern "C" {
    pub fn OpenMM_OpenMMException_create(
        message: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_OpenMMException;
}
extern "C" {
    pub fn OpenMM_OpenMMException_destroy(target: *mut OpenMM_OpenMMException);
}
extern "C" {
    pub fn OpenMM_OpenMMException_what(
        target: *const OpenMM_OpenMMException,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_create(
        defaultPressure: f64,
        defaultTemperature: f64,
        frequency: ::std::os::raw::c_int,
    ) -> *mut OpenMM_MonteCarloBarostat;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_destroy(target: *mut OpenMM_MonteCarloBarostat);
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_Pressure() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_Temperature() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_getDefaultPressure(
        target: *const OpenMM_MonteCarloBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_setDefaultPressure(
        target: *mut OpenMM_MonteCarloBarostat,
        pressure: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_getFrequency(
        target: *const OpenMM_MonteCarloBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_setFrequency(
        target: *mut OpenMM_MonteCarloBarostat,
        freq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_getDefaultTemperature(
        target: *const OpenMM_MonteCarloBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_setDefaultTemperature(
        target: *mut OpenMM_MonteCarloBarostat,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_getRandomNumberSeed(
        target: *const OpenMM_MonteCarloBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_setRandomNumberSeed(
        target: *mut OpenMM_MonteCarloBarostat,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloBarostat_usesPeriodicBoundaryConditions(
        target: *const OpenMM_MonteCarloBarostat,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_GayBerneForce_NonbondedMethod_OpenMM_GayBerneForce_NoCutoff:
    OpenMM_GayBerneForce_NonbondedMethod = 0;
pub const OpenMM_GayBerneForce_NonbondedMethod_OpenMM_GayBerneForce_CutoffNonPeriodic:
    OpenMM_GayBerneForce_NonbondedMethod = 1;
pub const OpenMM_GayBerneForce_NonbondedMethod_OpenMM_GayBerneForce_CutoffPeriodic:
    OpenMM_GayBerneForce_NonbondedMethod = 2;
pub type OpenMM_GayBerneForce_NonbondedMethod = u32;
extern "C" {
    pub fn OpenMM_GayBerneForce_create() -> *mut OpenMM_GayBerneForce;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_destroy(target: *mut OpenMM_GayBerneForce);
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getNumParticles(
        target: *const OpenMM_GayBerneForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getNumExceptions(
        target: *const OpenMM_GayBerneForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getNonbondedMethod(
        target: *const OpenMM_GayBerneForce,
    ) -> OpenMM_GayBerneForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setNonbondedMethod(
        target: *mut OpenMM_GayBerneForce,
        method: OpenMM_GayBerneForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getCutoffDistance(target: *const OpenMM_GayBerneForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setCutoffDistance(target: *mut OpenMM_GayBerneForce, distance: f64);
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getUseSwitchingFunction(
        target: *const OpenMM_GayBerneForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setUseSwitchingFunction(
        target: *mut OpenMM_GayBerneForce,
        use_: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getSwitchingDistance(target: *const OpenMM_GayBerneForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setSwitchingDistance(
        target: *mut OpenMM_GayBerneForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_addParticle(
        target: *mut OpenMM_GayBerneForce,
        sigma: f64,
        epsilon: f64,
        xparticle: ::std::os::raw::c_int,
        yparticle: ::std::os::raw::c_int,
        sx: f64,
        sy: f64,
        sz: f64,
        ex: f64,
        ey: f64,
        ez: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getParticleParameters(
        target: *const OpenMM_GayBerneForce,
        index: ::std::os::raw::c_int,
        sigma: *mut f64,
        epsilon: *mut f64,
        xparticle: *mut ::std::os::raw::c_int,
        yparticle: *mut ::std::os::raw::c_int,
        sx: *mut f64,
        sy: *mut f64,
        sz: *mut f64,
        ex: *mut f64,
        ey: *mut f64,
        ez: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setParticleParameters(
        target: *mut OpenMM_GayBerneForce,
        index: ::std::os::raw::c_int,
        sigma: f64,
        epsilon: f64,
        xparticle: ::std::os::raw::c_int,
        yparticle: ::std::os::raw::c_int,
        sx: f64,
        sy: f64,
        sz: f64,
        ex: f64,
        ey: f64,
        ez: f64,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_addException(
        target: *mut OpenMM_GayBerneForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        sigma: f64,
        epsilon: f64,
        replace: OpenMM_Boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GayBerneForce_getExceptionParameters(
        target: *const OpenMM_GayBerneForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        sigma: *mut f64,
        epsilon: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_setExceptionParameters(
        target: *mut OpenMM_GayBerneForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        sigma: f64,
        epsilon: f64,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_updateParametersInContext(
        target: *mut OpenMM_GayBerneForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_GayBerneForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_GayBerneForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_TwoParticleAverageSite_create(
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        weight1: f64,
        weight2: f64,
    ) -> *mut OpenMM_TwoParticleAverageSite;
}
extern "C" {
    pub fn OpenMM_TwoParticleAverageSite_destroy(target: *mut OpenMM_TwoParticleAverageSite);
}
extern "C" {
    pub fn OpenMM_TwoParticleAverageSite_getWeight(
        target: *const OpenMM_TwoParticleAverageSite,
        particle: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_create(
        particles: *const OpenMM_IntArray,
        originWeights: *const OpenMM_DoubleArray,
        xWeights: *const OpenMM_DoubleArray,
        yWeights: *const OpenMM_DoubleArray,
        localPosition: *const OpenMM_Vec3,
    ) -> *mut OpenMM_LocalCoordinatesSite;
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_create_2(
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        originWeights: *const OpenMM_Vec3,
        xWeights: *const OpenMM_Vec3,
        yWeights: *const OpenMM_Vec3,
        localPosition: *const OpenMM_Vec3,
    ) -> *mut OpenMM_LocalCoordinatesSite;
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_destroy(target: *mut OpenMM_LocalCoordinatesSite);
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_getOriginWeights(
        target: *const OpenMM_LocalCoordinatesSite,
        weights: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_getXWeights(
        target: *const OpenMM_LocalCoordinatesSite,
        weights: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_getYWeights(
        target: *const OpenMM_LocalCoordinatesSite,
        weights: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_LocalCoordinatesSite_getLocalPosition(
        target: *const OpenMM_LocalCoordinatesSite,
    ) -> *const OpenMM_Vec3;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomBondForce;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_destroy(target: *mut OpenMM_CustomBondForce);
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getNumBonds(
        target: *const OpenMM_CustomBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getNumPerBondParameters(
        target: *const OpenMM_CustomBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getNumGlobalParameters(
        target: *const OpenMM_CustomBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getEnergyFunction(
        target: *const OpenMM_CustomBondForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setEnergyFunction(
        target: *mut OpenMM_CustomBondForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_addPerBondParameter(
        target: *mut OpenMM_CustomBondForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getPerBondParameterName(
        target: *const OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setPerBondParameterName(
        target: *mut OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_addGlobalParameter(
        target: *mut OpenMM_CustomBondForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getGlobalParameterName(
        target: *const OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setGlobalParameterName(
        target: *mut OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomBondForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_addBond(
        target: *mut OpenMM_CustomBondForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomBondForce_getBondParameters(
        target: *const OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setBondParameters(
        target: *mut OpenMM_CustomBondForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_updateParametersInContext(
        target: *mut OpenMM_CustomBondForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CustomBondForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomBondForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomBondForce,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_State_DataType_OpenMM_State_Positions: OpenMM_State_DataType = 1;
pub const OpenMM_State_DataType_OpenMM_State_Velocities: OpenMM_State_DataType = 2;
pub const OpenMM_State_DataType_OpenMM_State_Forces: OpenMM_State_DataType = 4;
pub const OpenMM_State_DataType_OpenMM_State_Energy: OpenMM_State_DataType = 8;
pub const OpenMM_State_DataType_OpenMM_State_Parameters: OpenMM_State_DataType = 16;
pub const OpenMM_State_DataType_OpenMM_State_ParameterDerivatives: OpenMM_State_DataType = 32;
pub type OpenMM_State_DataType = u32;
extern "C" {
    pub fn OpenMM_State_create() -> *mut OpenMM_State;
}
extern "C" {
    pub fn OpenMM_State_destroy(target: *mut OpenMM_State);
}
extern "C" {
    pub fn OpenMM_State_getTime(target: *const OpenMM_State) -> f64;
}
extern "C" {
    pub fn OpenMM_State_getPositions(target: *const OpenMM_State) -> *const OpenMM_Vec3Array;
}
extern "C" {
    pub fn OpenMM_State_getVelocities(target: *const OpenMM_State) -> *const OpenMM_Vec3Array;
}
extern "C" {
    pub fn OpenMM_State_getForces(target: *const OpenMM_State) -> *const OpenMM_Vec3Array;
}
extern "C" {
    pub fn OpenMM_State_getKineticEnergy(target: *const OpenMM_State) -> f64;
}
extern "C" {
    pub fn OpenMM_State_getPotentialEnergy(target: *const OpenMM_State) -> f64;
}
extern "C" {
    pub fn OpenMM_State_getPeriodicBoxVectors(
        target: *const OpenMM_State,
        a: *mut OpenMM_Vec3,
        b: *mut OpenMM_Vec3,
        c: *mut OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_State_getPeriodicBoxVolume(target: *const OpenMM_State) -> f64;
}
extern "C" {
    pub fn OpenMM_State_getParameters(target: *const OpenMM_State) -> *const OpenMM_ParameterArray;
}
extern "C" {
    pub fn OpenMM_State_getEnergyParameterDerivatives(
        target: *const OpenMM_State,
    ) -> *const OpenMM_ParameterArray;
}
extern "C" {
    pub fn OpenMM_State_getDataTypes(target: *const OpenMM_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_create() -> *mut OpenMM_HarmonicAngleForce;
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_destroy(target: *mut OpenMM_HarmonicAngleForce);
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_getNumAngles(
        target: *const OpenMM_HarmonicAngleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_addAngle(
        target: *mut OpenMM_HarmonicAngleForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        angle: f64,
        k: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_getAngleParameters(
        target: *const OpenMM_HarmonicAngleForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        particle3: *mut ::std::os::raw::c_int,
        angle: *mut f64,
        k: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_setAngleParameters(
        target: *mut OpenMM_HarmonicAngleForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        angle: f64,
        k: f64,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_updateParametersInContext(
        target: *mut OpenMM_HarmonicAngleForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_HarmonicAngleForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicAngleForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_HarmonicAngleForce,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_CustomManyParticleForce_NonbondedMethod_OpenMM_CustomManyParticleForce_NoCutoff:
    OpenMM_CustomManyParticleForce_NonbondedMethod = 0;
pub const OpenMM_CustomManyParticleForce_NonbondedMethod_OpenMM_CustomManyParticleForce_CutoffNonPeriodic : OpenMM_CustomManyParticleForce_NonbondedMethod = 1 ;
pub const OpenMM_CustomManyParticleForce_NonbondedMethod_OpenMM_CustomManyParticleForce_CutoffPeriodic : OpenMM_CustomManyParticleForce_NonbondedMethod = 2 ;
pub type OpenMM_CustomManyParticleForce_NonbondedMethod = u32;
pub const OpenMM_CustomManyParticleForce_PermutationMode_OpenMM_CustomManyParticleForce_SinglePermutation : OpenMM_CustomManyParticleForce_PermutationMode = 0 ;
pub const OpenMM_CustomManyParticleForce_PermutationMode_OpenMM_CustomManyParticleForce_UniqueCentralParticle : OpenMM_CustomManyParticleForce_PermutationMode = 1 ;
pub type OpenMM_CustomManyParticleForce_PermutationMode = u32;
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_create(
        particlesPerSet: ::std::os::raw::c_int,
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomManyParticleForce;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_destroy(target: *mut OpenMM_CustomManyParticleForce);
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumParticlesPerSet(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumParticles(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumExclusions(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumPerParticleParameters(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumGlobalParameters(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getEnergyFunction(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setEnergyFunction(
        target: *mut OpenMM_CustomManyParticleForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getNonbondedMethod(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> OpenMM_CustomManyParticleForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setNonbondedMethod(
        target: *mut OpenMM_CustomManyParticleForce,
        method: OpenMM_CustomManyParticleForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getPermutationMode(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> OpenMM_CustomManyParticleForce_PermutationMode;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setPermutationMode(
        target: *mut OpenMM_CustomManyParticleForce,
        mode: OpenMM_CustomManyParticleForce_PermutationMode,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getCutoffDistance(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setCutoffDistance(
        target: *mut OpenMM_CustomManyParticleForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_addPerParticleParameter(
        target: *mut OpenMM_CustomManyParticleForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getPerParticleParameterName(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setPerParticleParameterName(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_addGlobalParameter(
        target: *mut OpenMM_CustomManyParticleForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getGlobalParameterName(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setGlobalParameterName(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_addParticle(
        target: *mut OpenMM_CustomManyParticleForce,
        parameters: *const OpenMM_DoubleArray,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getParticleParameters(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
        type_: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setParticleParameters(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_addExclusion(
        target: *mut OpenMM_CustomManyParticleForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getExclusionParticles(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setExclusionParticles(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_createExclusionsFromBonds(
        target: *mut OpenMM_CustomManyParticleForce,
        bonds: *const OpenMM_BondArray,
        bondCutoff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getTypeFilter(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        types: *mut OpenMM_IntSet,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_setTypeFilter(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
        types: *const OpenMM_IntSet,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_addTabulatedFunction(
        target: *mut OpenMM_CustomManyParticleForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getTabulatedFunction(
        target: *mut OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomManyParticleForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_updateParametersInContext(
        target: *mut OpenMM_CustomManyParticleForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomManyParticleForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomManyParticleForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Integrator_destroy(target: *mut OpenMM_Integrator);
}
extern "C" {
    pub fn OpenMM_Integrator_getStepSize(target: *const OpenMM_Integrator) -> f64;
}
extern "C" {
    pub fn OpenMM_Integrator_setStepSize(target: *mut OpenMM_Integrator, size: f64);
}
extern "C" {
    pub fn OpenMM_Integrator_getConstraintTolerance(target: *const OpenMM_Integrator) -> f64;
}
extern "C" {
    pub fn OpenMM_Integrator_setConstraintTolerance(target: *mut OpenMM_Integrator, tol: f64);
}
extern "C" {
    pub fn OpenMM_Integrator_step(target: *mut OpenMM_Integrator, steps: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_create(
        errorTol: f64,
    ) -> *mut OpenMM_VariableVerletIntegrator;
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_destroy(target: *mut OpenMM_VariableVerletIntegrator);
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_getErrorTolerance(
        target: *const OpenMM_VariableVerletIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_setErrorTolerance(
        target: *mut OpenMM_VariableVerletIntegrator,
        tol: f64,
    );
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_step(
        target: *mut OpenMM_VariableVerletIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_VariableVerletIntegrator_stepTo(
        target: *mut OpenMM_VariableVerletIntegrator,
        time: f64,
    );
}
pub const OpenMM_MonteCarloMembraneBarostat_XYMode_OpenMM_MonteCarloMembraneBarostat_XYIsotropic:
    OpenMM_MonteCarloMembraneBarostat_XYMode = 0;
pub const OpenMM_MonteCarloMembraneBarostat_XYMode_OpenMM_MonteCarloMembraneBarostat_XYAnisotropic : OpenMM_MonteCarloMembraneBarostat_XYMode = 1 ;
pub type OpenMM_MonteCarloMembraneBarostat_XYMode = u32;
pub const OpenMM_MonteCarloMembraneBarostat_ZMode_OpenMM_MonteCarloMembraneBarostat_ZFree:
    OpenMM_MonteCarloMembraneBarostat_ZMode = 0;
pub const OpenMM_MonteCarloMembraneBarostat_ZMode_OpenMM_MonteCarloMembraneBarostat_ZFixed:
    OpenMM_MonteCarloMembraneBarostat_ZMode = 1;
pub const OpenMM_MonteCarloMembraneBarostat_ZMode_OpenMM_MonteCarloMembraneBarostat_ConstantVolume : OpenMM_MonteCarloMembraneBarostat_ZMode = 2 ;
pub type OpenMM_MonteCarloMembraneBarostat_ZMode = u32;
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_create(
        defaultPressure: f64,
        defaultSurfaceTension: f64,
        defaultTemperature: f64,
        xymode: OpenMM_MonteCarloMembraneBarostat_XYMode,
        zmode: OpenMM_MonteCarloMembraneBarostat_ZMode,
        frequency: ::std::os::raw::c_int,
    ) -> *mut OpenMM_MonteCarloMembraneBarostat;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_destroy(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_Pressure() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_SurfaceTension() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_Temperature() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getDefaultPressure(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setDefaultPressure(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        pressure: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getDefaultSurfaceTension(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setDefaultSurfaceTension(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        surfaceTension: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getFrequency(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setFrequency(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        freq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getDefaultTemperature(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setDefaultTemperature(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getXYMode(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> OpenMM_MonteCarloMembraneBarostat_XYMode;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setXYMode(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        mode: OpenMM_MonteCarloMembraneBarostat_XYMode,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getZMode(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> OpenMM_MonteCarloMembraneBarostat_ZMode;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setZMode(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        mode: OpenMM_MonteCarloMembraneBarostat_ZMode,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_getRandomNumberSeed(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_setRandomNumberSeed(
        target: *mut OpenMM_MonteCarloMembraneBarostat,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloMembraneBarostat_usesPeriodicBoundaryConditions(
        target: *const OpenMM_MonteCarloMembraneBarostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_create(
        defaultPressure: *const OpenMM_Vec3,
        defaultTemperature: f64,
        scaleX: OpenMM_Boolean,
        scaleY: OpenMM_Boolean,
        scaleZ: OpenMM_Boolean,
        frequency: ::std::os::raw::c_int,
    ) -> *mut OpenMM_MonteCarloAnisotropicBarostat;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_destroy(
        target: *mut OpenMM_MonteCarloAnisotropicBarostat,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_PressureX() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_PressureY() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_PressureZ() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_Temperature() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getDefaultPressure(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> *const OpenMM_Vec3;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_setDefaultPressure(
        target: *mut OpenMM_MonteCarloAnisotropicBarostat,
        pressure: *const OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getScaleX(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getScaleY(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getScaleZ(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getFrequency(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_setFrequency(
        target: *mut OpenMM_MonteCarloAnisotropicBarostat,
        freq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getDefaultTemperature(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_setDefaultTemperature(
        target: *mut OpenMM_MonteCarloAnisotropicBarostat,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_getRandomNumberSeed(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_setRandomNumberSeed(
        target: *mut OpenMM_MonteCarloAnisotropicBarostat,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_MonteCarloAnisotropicBarostat_usesPeriodicBoundaryConditions(
        target: *const OpenMM_MonteCarloAnisotropicBarostat,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomCVForce;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_destroy(target: *mut OpenMM_CustomCVForce);
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getNumCollectiveVariables(
        target: *const OpenMM_CustomCVForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getNumGlobalParameters(
        target: *const OpenMM_CustomCVForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomCVForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomCVForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getEnergyFunction(
        target: *const OpenMM_CustomCVForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_setEnergyFunction(
        target: *mut OpenMM_CustomCVForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_addCollectiveVariable(
        target: *mut OpenMM_CustomCVForce,
        name: *const ::std::os::raw::c_char,
        variable: *mut OpenMM_Force,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getCollectiveVariableName(
        target: *const OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getCollectiveVariable(
        target: *mut OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_Force;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_addGlobalParameter(
        target: *mut OpenMM_CustomCVForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getGlobalParameterName(
        target: *const OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_setGlobalParameterName(
        target: *mut OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomCVForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_addTabulatedFunction(
        target: *mut OpenMM_CustomCVForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getTabulatedFunction(
        target: *mut OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomCVForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getCollectiveVariableValues(
        target: *mut OpenMM_CustomCVForce,
        context: *mut OpenMM_Context,
        values: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_getInnerContext(
        target: *mut OpenMM_CustomCVForce,
        context: *mut OpenMM_Context,
    ) -> *mut OpenMM_Context;
}
extern "C" {
    pub fn OpenMM_CustomCVForce_updateParametersInContext(
        target: *mut OpenMM_CustomCVForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomCVForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomCVForce,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_NoCutoff:
    OpenMM_NonbondedForce_NonbondedMethod = 0;
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_CutoffNonPeriodic:
    OpenMM_NonbondedForce_NonbondedMethod = 1;
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_CutoffPeriodic:
    OpenMM_NonbondedForce_NonbondedMethod = 2;
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_Ewald:
    OpenMM_NonbondedForce_NonbondedMethod = 3;
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_PME:
    OpenMM_NonbondedForce_NonbondedMethod = 4;
pub const OpenMM_NonbondedForce_NonbondedMethod_OpenMM_NonbondedForce_LJPME:
    OpenMM_NonbondedForce_NonbondedMethod = 5;
pub type OpenMM_NonbondedForce_NonbondedMethod = u32;
extern "C" {
    pub fn OpenMM_NonbondedForce_create() -> *mut OpenMM_NonbondedForce;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_destroy(target: *mut OpenMM_NonbondedForce);
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNumParticles(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNumExceptions(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNumGlobalParameters(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNumParticleParameterOffsets(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNumExceptionParameterOffsets(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getNonbondedMethod(
        target: *const OpenMM_NonbondedForce,
    ) -> OpenMM_NonbondedForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setNonbondedMethod(
        target: *mut OpenMM_NonbondedForce,
        method: OpenMM_NonbondedForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getCutoffDistance(target: *const OpenMM_NonbondedForce) -> f64;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setCutoffDistance(
        target: *mut OpenMM_NonbondedForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getUseSwitchingFunction(
        target: *const OpenMM_NonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setUseSwitchingFunction(
        target: *mut OpenMM_NonbondedForce,
        use_: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getSwitchingDistance(target: *const OpenMM_NonbondedForce) -> f64;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setSwitchingDistance(
        target: *mut OpenMM_NonbondedForce,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getReactionFieldDielectric(
        target: *const OpenMM_NonbondedForce,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setReactionFieldDielectric(
        target: *mut OpenMM_NonbondedForce,
        dielectric: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getEwaldErrorTolerance(
        target: *const OpenMM_NonbondedForce,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setEwaldErrorTolerance(
        target: *mut OpenMM_NonbondedForce,
        tol: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getPMEParameters(
        target: *const OpenMM_NonbondedForce,
        alpha: *mut f64,
        nx: *mut ::std::os::raw::c_int,
        ny: *mut ::std::os::raw::c_int,
        nz: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getLJPMEParameters(
        target: *const OpenMM_NonbondedForce,
        alpha: *mut f64,
        nx: *mut ::std::os::raw::c_int,
        ny: *mut ::std::os::raw::c_int,
        nz: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setPMEParameters(
        target: *mut OpenMM_NonbondedForce,
        alpha: f64,
        nx: ::std::os::raw::c_int,
        ny: ::std::os::raw::c_int,
        nz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setLJPMEParameters(
        target: *mut OpenMM_NonbondedForce,
        alpha: f64,
        nx: ::std::os::raw::c_int,
        ny: ::std::os::raw::c_int,
        nz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getPMEParametersInContext(
        target: *const OpenMM_NonbondedForce,
        context: *const OpenMM_Context,
        alpha: *mut f64,
        nx: *mut ::std::os::raw::c_int,
        ny: *mut ::std::os::raw::c_int,
        nz: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getLJPMEParametersInContext(
        target: *const OpenMM_NonbondedForce,
        context: *const OpenMM_Context,
        alpha: *mut f64,
        nx: *mut ::std::os::raw::c_int,
        ny: *mut ::std::os::raw::c_int,
        nz: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_addParticle(
        target: *mut OpenMM_NonbondedForce,
        charge: f64,
        sigma: f64,
        epsilon: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getParticleParameters(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        charge: *mut f64,
        sigma: *mut f64,
        epsilon: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setParticleParameters(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        charge: f64,
        sigma: f64,
        epsilon: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_addException(
        target: *mut OpenMM_NonbondedForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        chargeProd: f64,
        sigma: f64,
        epsilon: f64,
        replace: OpenMM_Boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getExceptionParameters(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        chargeProd: *mut f64,
        sigma: *mut f64,
        epsilon: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setExceptionParameters(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        chargeProd: f64,
        sigma: f64,
        epsilon: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_createExceptionsFromBonds(
        target: *mut OpenMM_NonbondedForce,
        bonds: *const OpenMM_BondArray,
        coulomb14Scale: f64,
        lj14Scale: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_addGlobalParameter(
        target: *mut OpenMM_NonbondedForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getGlobalParameterName(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setGlobalParameterName(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_addParticleParameterOffset(
        target: *mut OpenMM_NonbondedForce,
        parameter: *const ::std::os::raw::c_char,
        particleIndex: ::std::os::raw::c_int,
        chargeScale: f64,
        sigmaScale: f64,
        epsilonScale: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getParticleParameterOffset(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        parameter: *mut *mut ::std::os::raw::c_char,
        particleIndex: *mut ::std::os::raw::c_int,
        chargeScale: *mut f64,
        sigmaScale: *mut f64,
        epsilonScale: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setParticleParameterOffset(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        parameter: *const ::std::os::raw::c_char,
        particleIndex: ::std::os::raw::c_int,
        chargeScale: f64,
        sigmaScale: f64,
        epsilonScale: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_addExceptionParameterOffset(
        target: *mut OpenMM_NonbondedForce,
        parameter: *const ::std::os::raw::c_char,
        exceptionIndex: ::std::os::raw::c_int,
        chargeProdScale: f64,
        sigmaScale: f64,
        epsilonScale: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getExceptionParameterOffset(
        target: *const OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        parameter: *mut *mut ::std::os::raw::c_char,
        exceptionIndex: *mut ::std::os::raw::c_int,
        chargeProdScale: *mut f64,
        sigmaScale: *mut f64,
        epsilonScale: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setExceptionParameterOffset(
        target: *mut OpenMM_NonbondedForce,
        index: ::std::os::raw::c_int,
        parameter: *const ::std::os::raw::c_char,
        exceptionIndex: ::std::os::raw::c_int,
        chargeProdScale: f64,
        sigmaScale: f64,
        epsilonScale: f64,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getUseDispersionCorrection(
        target: *const OpenMM_NonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setUseDispersionCorrection(
        target: *mut OpenMM_NonbondedForce,
        useCorrection: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_getReciprocalSpaceForceGroup(
        target: *const OpenMM_NonbondedForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_NonbondedForce_setReciprocalSpaceForceGroup(
        target: *mut OpenMM_NonbondedForce,
        group: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_updateParametersInContext(
        target: *mut OpenMM_NonbondedForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_NonbondedForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_NonbondedForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_create() -> *mut OpenMM_PeriodicTorsionForce;
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_destroy(target: *mut OpenMM_PeriodicTorsionForce);
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_getNumTorsions(
        target: *const OpenMM_PeriodicTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_addTorsion(
        target: *mut OpenMM_PeriodicTorsionForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        periodicity: ::std::os::raw::c_int,
        phase: f64,
        k: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_getTorsionParameters(
        target: *const OpenMM_PeriodicTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        particle3: *mut ::std::os::raw::c_int,
        particle4: *mut ::std::os::raw::c_int,
        periodicity: *mut ::std::os::raw::c_int,
        phase: *mut f64,
        k: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_setTorsionParameters(
        target: *mut OpenMM_PeriodicTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        periodicity: ::std::os::raw::c_int,
        phase: f64,
        k: f64,
    );
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_updateParametersInContext(
        target: *mut OpenMM_PeriodicTorsionForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_PeriodicTorsionForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_PeriodicTorsionForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_PeriodicTorsionForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_create(
        temperature: f64,
        frictionCoeff: f64,
        stepSize: f64,
    ) -> *mut OpenMM_BrownianIntegrator;
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_destroy(target: *mut OpenMM_BrownianIntegrator);
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_getTemperature(
        target: *const OpenMM_BrownianIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_setTemperature(
        target: *mut OpenMM_BrownianIntegrator,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_getFriction(target: *const OpenMM_BrownianIntegrator) -> f64;
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_setFriction(
        target: *mut OpenMM_BrownianIntegrator,
        coeff: f64,
    );
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_getRandomNumberSeed(
        target: *const OpenMM_BrownianIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_setRandomNumberSeed(
        target: *mut OpenMM_BrownianIntegrator,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_BrownianIntegrator_step(
        target: *mut OpenMM_BrownianIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
pub const OpenMM_GBSAOBCForce_NonbondedMethod_OpenMM_GBSAOBCForce_NoCutoff:
    OpenMM_GBSAOBCForce_NonbondedMethod = 0;
pub const OpenMM_GBSAOBCForce_NonbondedMethod_OpenMM_GBSAOBCForce_CutoffNonPeriodic:
    OpenMM_GBSAOBCForce_NonbondedMethod = 1;
pub const OpenMM_GBSAOBCForce_NonbondedMethod_OpenMM_GBSAOBCForce_CutoffPeriodic:
    OpenMM_GBSAOBCForce_NonbondedMethod = 2;
pub type OpenMM_GBSAOBCForce_NonbondedMethod = u32;
extern "C" {
    pub fn OpenMM_GBSAOBCForce_create() -> *mut OpenMM_GBSAOBCForce;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_destroy(target: *mut OpenMM_GBSAOBCForce);
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getNumParticles(
        target: *const OpenMM_GBSAOBCForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_addParticle(
        target: *mut OpenMM_GBSAOBCForce,
        charge: f64,
        radius: f64,
        scalingFactor: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getParticleParameters(
        target: *const OpenMM_GBSAOBCForce,
        index: ::std::os::raw::c_int,
        charge: *mut f64,
        radius: *mut f64,
        scalingFactor: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setParticleParameters(
        target: *mut OpenMM_GBSAOBCForce,
        index: ::std::os::raw::c_int,
        charge: f64,
        radius: f64,
        scalingFactor: f64,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getSolventDielectric(target: *const OpenMM_GBSAOBCForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setSolventDielectric(
        target: *mut OpenMM_GBSAOBCForce,
        dielectric: f64,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getSoluteDielectric(target: *const OpenMM_GBSAOBCForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setSoluteDielectric(
        target: *mut OpenMM_GBSAOBCForce,
        dielectric: f64,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getSurfaceAreaEnergy(target: *const OpenMM_GBSAOBCForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setSurfaceAreaEnergy(target: *mut OpenMM_GBSAOBCForce, energy: f64);
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getNonbondedMethod(
        target: *const OpenMM_GBSAOBCForce,
    ) -> OpenMM_GBSAOBCForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setNonbondedMethod(
        target: *mut OpenMM_GBSAOBCForce,
        method: OpenMM_GBSAOBCForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_getCutoffDistance(target: *const OpenMM_GBSAOBCForce) -> f64;
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_setCutoffDistance(target: *mut OpenMM_GBSAOBCForce, distance: f64);
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_updateParametersInContext(
        target: *mut OpenMM_GBSAOBCForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_GBSAOBCForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_GBSAOBCForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_VerletIntegrator_create(stepSize: f64) -> *mut OpenMM_VerletIntegrator;
}
extern "C" {
    pub fn OpenMM_VerletIntegrator_destroy(target: *mut OpenMM_VerletIntegrator);
}
extern "C" {
    pub fn OpenMM_VerletIntegrator_step(
        target: *mut OpenMM_VerletIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_LocalEnergyMinimizer_destroy(target: *mut OpenMM_LocalEnergyMinimizer);
}
extern "C" {
    pub fn OpenMM_LocalEnergyMinimizer_minimize(
        context: *mut OpenMM_Context,
        tolerance: f64,
        maxIterations: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_create(
        temperature: f64,
        frictionCoeff: f64,
        stepSize: f64,
    ) -> *mut OpenMM_LangevinIntegrator;
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_destroy(target: *mut OpenMM_LangevinIntegrator);
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_getTemperature(
        target: *const OpenMM_LangevinIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_setTemperature(
        target: *mut OpenMM_LangevinIntegrator,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_getFriction(target: *const OpenMM_LangevinIntegrator) -> f64;
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_setFriction(
        target: *mut OpenMM_LangevinIntegrator,
        coeff: f64,
    );
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_getRandomNumberSeed(
        target: *const OpenMM_LangevinIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_setRandomNumberSeed(
        target: *mut OpenMM_LangevinIntegrator,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_LangevinIntegrator_step(
        target: *mut OpenMM_LangevinIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_create(
        temperature: f64,
        frictionCoeff: f64,
        errorTol: f64,
    ) -> *mut OpenMM_VariableLangevinIntegrator;
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_destroy(
        target: *mut OpenMM_VariableLangevinIntegrator,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_getTemperature(
        target: *const OpenMM_VariableLangevinIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_setTemperature(
        target: *mut OpenMM_VariableLangevinIntegrator,
        temp: f64,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_getFriction(
        target: *const OpenMM_VariableLangevinIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_setFriction(
        target: *mut OpenMM_VariableLangevinIntegrator,
        coeff: f64,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_getErrorTolerance(
        target: *const OpenMM_VariableLangevinIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_setErrorTolerance(
        target: *mut OpenMM_VariableLangevinIntegrator,
        tol: f64,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_getRandomNumberSeed(
        target: *const OpenMM_VariableLangevinIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_setRandomNumberSeed(
        target: *mut OpenMM_VariableLangevinIntegrator,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_step(
        target: *mut OpenMM_VariableLangevinIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_VariableLangevinIntegrator_stepTo(
        target: *mut OpenMM_VariableLangevinIntegrator,
        time: f64,
    );
}
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_ComputeGlobal:
    OpenMM_CustomIntegrator_ComputationType = 0;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_ComputePerDof:
    OpenMM_CustomIntegrator_ComputationType = 1;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_ComputeSum:
    OpenMM_CustomIntegrator_ComputationType = 2;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_ConstrainPositions:
    OpenMM_CustomIntegrator_ComputationType = 3;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_ConstrainVelocities:
    OpenMM_CustomIntegrator_ComputationType = 4;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_UpdateContextState:
    OpenMM_CustomIntegrator_ComputationType = 5;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_IfBlockStart:
    OpenMM_CustomIntegrator_ComputationType = 6;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_WhileBlockStart:
    OpenMM_CustomIntegrator_ComputationType = 7;
pub const OpenMM_CustomIntegrator_ComputationType_OpenMM_CustomIntegrator_BlockEnd:
    OpenMM_CustomIntegrator_ComputationType = 8;
pub type OpenMM_CustomIntegrator_ComputationType = u32;
extern "C" {
    pub fn OpenMM_CustomIntegrator_create(stepSize: f64) -> *mut OpenMM_CustomIntegrator;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_destroy(target: *mut OpenMM_CustomIntegrator);
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getNumGlobalVariables(
        target: *const OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getNumPerDofVariables(
        target: *const OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getNumComputations(
        target: *const OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getNumTabulatedFunctions(
        target: *const OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addGlobalVariable(
        target: *mut OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        initialValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getGlobalVariableName(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addPerDofVariable(
        target: *mut OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        initialValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getPerDofVariableName(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getGlobalVariable(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getGlobalVariableByName(
        target: *const OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setGlobalVariable(
        target: *mut OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setGlobalVariableByName(
        target: *mut OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        value: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getPerDofVariable(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
        values: *mut OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getPerDofVariableByName(
        target: *const OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        values: *mut OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setPerDofVariable(
        target: *mut OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
        values: *const OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setPerDofVariableByName(
        target: *mut OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addComputeGlobal(
        target: *mut OpenMM_CustomIntegrator,
        variable: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addComputePerDof(
        target: *mut OpenMM_CustomIntegrator,
        variable: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addComputeSum(
        target: *mut OpenMM_CustomIntegrator,
        variable: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addConstrainPositions(
        target: *mut OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addConstrainVelocities(
        target: *mut OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addUpdateContextState(
        target: *mut OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_beginIfBlock(
        target: *mut OpenMM_CustomIntegrator,
        condition: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_beginWhileBlock(
        target: *mut OpenMM_CustomIntegrator,
        condition: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_endBlock(
        target: *mut OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getComputationStep(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
        type_: *mut OpenMM_CustomIntegrator_ComputationType,
        variable: *mut *mut ::std::os::raw::c_char,
        expression: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_addTabulatedFunction(
        target: *mut OpenMM_CustomIntegrator,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getTabulatedFunction(
        target: *mut OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getTabulatedFunctionName(
        target: *const OpenMM_CustomIntegrator,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getKineticEnergyExpression(
        target: *const OpenMM_CustomIntegrator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setKineticEnergyExpression(
        target: *mut OpenMM_CustomIntegrator,
        expression: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_getRandomNumberSeed(
        target: *const OpenMM_CustomIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_setRandomNumberSeed(
        target: *mut OpenMM_CustomIntegrator,
        seed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomIntegrator_step(
        target: *mut OpenMM_CustomIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_create() -> *mut OpenMM_RBTorsionForce;
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_destroy(target: *mut OpenMM_RBTorsionForce);
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_getNumTorsions(
        target: *const OpenMM_RBTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_addTorsion(
        target: *mut OpenMM_RBTorsionForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        c0: f64,
        c1: f64,
        c2: f64,
        c3: f64,
        c4: f64,
        c5: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_getTorsionParameters(
        target: *const OpenMM_RBTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        particle3: *mut ::std::os::raw::c_int,
        particle4: *mut ::std::os::raw::c_int,
        c0: *mut f64,
        c1: *mut f64,
        c2: *mut f64,
        c3: *mut f64,
        c4: *mut f64,
        c5: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_setTorsionParameters(
        target: *mut OpenMM_RBTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        c0: f64,
        c1: f64,
        c2: f64,
        c3: f64,
        c4: f64,
        c5: f64,
    );
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_updateParametersInContext(
        target: *mut OpenMM_RBTorsionForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_RBTorsionForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_RBTorsionForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_RBTorsionForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_create() -> *mut OpenMM_CompoundIntegrator;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_destroy(target: *mut OpenMM_CompoundIntegrator);
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_getNumIntegrators(
        target: *const OpenMM_CompoundIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_addIntegrator(
        target: *mut OpenMM_CompoundIntegrator,
        integrator: *mut OpenMM_Integrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_getIntegrator(
        target: *mut OpenMM_CompoundIntegrator,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_Integrator;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_getCurrentIntegrator(
        target: *const OpenMM_CompoundIntegrator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_setCurrentIntegrator(
        target: *mut OpenMM_CompoundIntegrator,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_getStepSize(target: *const OpenMM_CompoundIntegrator) -> f64;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_setStepSize(target: *mut OpenMM_CompoundIntegrator, size: f64);
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_getConstraintTolerance(
        target: *const OpenMM_CompoundIntegrator,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_setConstraintTolerance(
        target: *mut OpenMM_CompoundIntegrator,
        tol: f64,
    );
}
extern "C" {
    pub fn OpenMM_CompoundIntegrator_step(
        target: *mut OpenMM_CompoundIntegrator,
        steps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_System_create() -> *mut OpenMM_System;
}
extern "C" {
    pub fn OpenMM_System_destroy(target: *mut OpenMM_System);
}
extern "C" {
    pub fn OpenMM_System_getNumParticles(target: *const OpenMM_System) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_addParticle(
        target: *mut OpenMM_System,
        mass: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_getParticleMass(
        target: *const OpenMM_System,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_System_setParticleMass(
        target: *mut OpenMM_System,
        index: ::std::os::raw::c_int,
        mass: f64,
    );
}
extern "C" {
    pub fn OpenMM_System_setVirtualSite(
        target: *mut OpenMM_System,
        index: ::std::os::raw::c_int,
        virtualSite: *mut OpenMM_VirtualSite,
    );
}
extern "C" {
    pub fn OpenMM_System_isVirtualSite(
        target: *const OpenMM_System,
        index: ::std::os::raw::c_int,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_System_getVirtualSite(
        target: *const OpenMM_System,
        index: ::std::os::raw::c_int,
    ) -> *const OpenMM_VirtualSite;
}
extern "C" {
    pub fn OpenMM_System_getNumConstraints(target: *const OpenMM_System) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_addConstraint(
        target: *mut OpenMM_System,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        distance: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_getConstraintParameters(
        target: *const OpenMM_System,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        distance: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_System_setConstraintParameters(
        target: *mut OpenMM_System,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        distance: f64,
    );
}
extern "C" {
    pub fn OpenMM_System_removeConstraint(target: *mut OpenMM_System, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_System_addForce(
        target: *mut OpenMM_System,
        force: *mut OpenMM_Force,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_getNumForces(target: *const OpenMM_System) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_System_getForce(
        target: *mut OpenMM_System,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_Force;
}
extern "C" {
    pub fn OpenMM_System_removeForce(target: *mut OpenMM_System, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OpenMM_System_getDefaultPeriodicBoxVectors(
        target: *const OpenMM_System,
        a: *mut OpenMM_Vec3,
        b: *mut OpenMM_Vec3,
        c: *mut OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_System_setDefaultPeriodicBoxVectors(
        target: *mut OpenMM_System,
        a: *const OpenMM_Vec3,
        b: *const OpenMM_Vec3,
        c: *const OpenMM_Vec3,
    );
}
extern "C" {
    pub fn OpenMM_System_usesPeriodicBoundaryConditions(
        target: *const OpenMM_System,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_create(
        numParticles: ::std::os::raw::c_int,
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomCompoundBondForce;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_destroy(target: *mut OpenMM_CustomCompoundBondForce);
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumParticlesPerBond(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumBonds(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumPerBondParameters(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumGlobalParameters(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getNumFunctions(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getEnergyFunction(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setEnergyFunction(
        target: *mut OpenMM_CustomCompoundBondForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addPerBondParameter(
        target: *mut OpenMM_CustomCompoundBondForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getPerBondParameterName(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setPerBondParameterName(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addGlobalParameter(
        target: *mut OpenMM_CustomCompoundBondForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getGlobalParameterName(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setGlobalParameterName(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomCompoundBondForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addBond(
        target: *mut OpenMM_CustomCompoundBondForce,
        particles: *const OpenMM_IntArray,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getBondParameters(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        particles: *mut OpenMM_IntArray,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setBondParameters(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        particles: *const OpenMM_IntArray,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addTabulatedFunction(
        target: *mut OpenMM_CustomCompoundBondForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getTabulatedFunction(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_addFunction(
        target: *mut OpenMM_CustomCompoundBondForce,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_getFunctionParameters(
        target: *const OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        values: *mut OpenMM_DoubleArray,
        min: *mut f64,
        max: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setFunctionParameters(
        target: *mut OpenMM_CustomCompoundBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_updateParametersInContext(
        target: *mut OpenMM_CustomCompoundBondForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CustomCompoundBondForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomCompoundBondForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomCompoundBondForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_create(
        numGroups: ::std::os::raw::c_int,
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomCentroidBondForce;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_destroy(target: *mut OpenMM_CustomCentroidBondForce);
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumGroupsPerBond(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumGroups(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumBonds(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumPerBondParameters(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumGlobalParameters(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getNumFunctions(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getEnergyFunction(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setEnergyFunction(
        target: *mut OpenMM_CustomCentroidBondForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addPerBondParameter(
        target: *mut OpenMM_CustomCentroidBondForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getPerBondParameterName(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setPerBondParameterName(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addGlobalParameter(
        target: *mut OpenMM_CustomCentroidBondForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getGlobalParameterName(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setGlobalParameterName(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomCentroidBondForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addGroup(
        target: *mut OpenMM_CustomCentroidBondForce,
        particles: *const OpenMM_IntArray,
        weights: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getGroupParameters(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        particles: *mut OpenMM_IntArray,
        weights: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setGroupParameters(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        particles: *const OpenMM_IntArray,
        weights: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addBond(
        target: *mut OpenMM_CustomCentroidBondForce,
        groups: *const OpenMM_IntArray,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getBondParameters(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        groups: *mut OpenMM_IntArray,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setBondParameters(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
        groups: *const OpenMM_IntArray,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_addTabulatedFunction(
        target: *mut OpenMM_CustomCentroidBondForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getTabulatedFunction(
        target: *mut OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomCentroidBondForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_updateParametersInContext(
        target: *mut OpenMM_CustomCentroidBondForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CustomCentroidBondForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomCentroidBondForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomCentroidBondForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_create() -> *mut OpenMM_CMAPTorsionForce;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_destroy(target: *mut OpenMM_CMAPTorsionForce);
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_getNumMaps(
        target: *const OpenMM_CMAPTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_getNumTorsions(
        target: *const OpenMM_CMAPTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_addMap(
        target: *mut OpenMM_CMAPTorsionForce,
        size: ::std::os::raw::c_int,
        energy: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_getMapParameters(
        target: *const OpenMM_CMAPTorsionForce,
        index: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
        energy: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_setMapParameters(
        target: *mut OpenMM_CMAPTorsionForce,
        index: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        energy: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_addTorsion(
        target: *mut OpenMM_CMAPTorsionForce,
        map: ::std::os::raw::c_int,
        a1: ::std::os::raw::c_int,
        a2: ::std::os::raw::c_int,
        a3: ::std::os::raw::c_int,
        a4: ::std::os::raw::c_int,
        b1: ::std::os::raw::c_int,
        b2: ::std::os::raw::c_int,
        b3: ::std::os::raw::c_int,
        b4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_getTorsionParameters(
        target: *const OpenMM_CMAPTorsionForce,
        index: ::std::os::raw::c_int,
        map: *mut ::std::os::raw::c_int,
        a1: *mut ::std::os::raw::c_int,
        a2: *mut ::std::os::raw::c_int,
        a3: *mut ::std::os::raw::c_int,
        a4: *mut ::std::os::raw::c_int,
        b1: *mut ::std::os::raw::c_int,
        b2: *mut ::std::os::raw::c_int,
        b3: *mut ::std::os::raw::c_int,
        b4: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_setTorsionParameters(
        target: *mut OpenMM_CMAPTorsionForce,
        index: ::std::os::raw::c_int,
        map: ::std::os::raw::c_int,
        a1: ::std::os::raw::c_int,
        a2: ::std::os::raw::c_int,
        a3: ::std::os::raw::c_int,
        a4: ::std::os::raw::c_int,
        b1: ::std::os::raw::c_int,
        b2: ::std::os::raw::c_int,
        b3: ::std::os::raw::c_int,
        b4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_updateParametersInContext(
        target: *mut OpenMM_CMAPTorsionForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CMAPTorsionForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CMAPTorsionForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CMAPTorsionForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Continuous3DFunction_create(
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        zsize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
        xmin: f64,
        xmax: f64,
        ymin: f64,
        ymax: f64,
        zmin: f64,
        zmax: f64,
    ) -> *mut OpenMM_Continuous3DFunction;
}
extern "C" {
    pub fn OpenMM_Continuous3DFunction_destroy(target: *mut OpenMM_Continuous3DFunction);
}
extern "C" {
    pub fn OpenMM_Continuous3DFunction_getFunctionParameters(
        target: *const OpenMM_Continuous3DFunction,
        xsize: *mut ::std::os::raw::c_int,
        ysize: *mut ::std::os::raw::c_int,
        zsize: *mut ::std::os::raw::c_int,
        values: *mut OpenMM_DoubleArray,
        xmin: *mut f64,
        xmax: *mut f64,
        ymin: *mut f64,
        ymax: *mut f64,
        zmin: *mut f64,
        zmax: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous3DFunction_setFunctionParameters(
        target: *mut OpenMM_Continuous3DFunction,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        zsize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
        xmin: f64,
        xmax: f64,
        ymin: f64,
        ymax: f64,
        zmin: f64,
        zmax: f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous3DFunction_Copy(
        target: *const OpenMM_Continuous3DFunction,
    ) -> *mut OpenMM_Continuous3DFunction;
}
extern "C" {
    pub fn OpenMM_OutOfPlaneSite_create(
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        weight12: f64,
        weight13: f64,
        weightCross: f64,
    ) -> *mut OpenMM_OutOfPlaneSite;
}
extern "C" {
    pub fn OpenMM_OutOfPlaneSite_destroy(target: *mut OpenMM_OutOfPlaneSite);
}
extern "C" {
    pub fn OpenMM_OutOfPlaneSite_getWeight12(target: *const OpenMM_OutOfPlaneSite) -> f64;
}
extern "C" {
    pub fn OpenMM_OutOfPlaneSite_getWeight13(target: *const OpenMM_OutOfPlaneSite) -> f64;
}
extern "C" {
    pub fn OpenMM_OutOfPlaneSite_getWeightCross(target: *const OpenMM_OutOfPlaneSite) -> f64;
}
extern "C" {
    pub fn OpenMM_Discrete1DFunction_create(
        values: *const OpenMM_DoubleArray,
    ) -> *mut OpenMM_Discrete1DFunction;
}
extern "C" {
    pub fn OpenMM_Discrete1DFunction_destroy(target: *mut OpenMM_Discrete1DFunction);
}
extern "C" {
    pub fn OpenMM_Discrete1DFunction_getFunctionParameters(
        target: *const OpenMM_Discrete1DFunction,
        values: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete1DFunction_setFunctionParameters(
        target: *mut OpenMM_Discrete1DFunction,
        values: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_Discrete1DFunction_Copy(
        target: *const OpenMM_Discrete1DFunction,
    ) -> *mut OpenMM_Discrete1DFunction;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomTorsionForce;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_destroy(target: *mut OpenMM_CustomTorsionForce);
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getNumTorsions(
        target: *const OpenMM_CustomTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getNumPerTorsionParameters(
        target: *const OpenMM_CustomTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getNumGlobalParameters(
        target: *const OpenMM_CustomTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomTorsionForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getEnergyFunction(
        target: *const OpenMM_CustomTorsionForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setEnergyFunction(
        target: *mut OpenMM_CustomTorsionForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_addPerTorsionParameter(
        target: *mut OpenMM_CustomTorsionForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getPerTorsionParameterName(
        target: *const OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setPerTorsionParameterName(
        target: *mut OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_addGlobalParameter(
        target: *mut OpenMM_CustomTorsionForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getGlobalParameterName(
        target: *const OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setGlobalParameterName(
        target: *mut OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomTorsionForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_addTorsion(
        target: *mut OpenMM_CustomTorsionForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_getTorsionParameters(
        target: *const OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        particle3: *mut ::std::os::raw::c_int,
        particle4: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setTorsionParameters(
        target: *mut OpenMM_CustomTorsionForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        particle3: ::std::os::raw::c_int,
        particle4: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_updateParametersInContext(
        target: *mut OpenMM_CustomTorsionForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_CustomTorsionForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_CustomTorsionForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomTorsionForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_create() -> *mut OpenMM_HarmonicBondForce;
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_destroy(target: *mut OpenMM_HarmonicBondForce);
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_getNumBonds(
        target: *const OpenMM_HarmonicBondForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_addBond(
        target: *mut OpenMM_HarmonicBondForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        length: f64,
        k: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_getBondParameters(
        target: *const OpenMM_HarmonicBondForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
        length: *mut f64,
        k: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_setBondParameters(
        target: *mut OpenMM_HarmonicBondForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
        length: f64,
        k: f64,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_updateParametersInContext(
        target: *mut OpenMM_HarmonicBondForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_setUsesPeriodicBoundaryConditions(
        target: *mut OpenMM_HarmonicBondForce,
        periodic: OpenMM_Boolean,
    );
}
extern "C" {
    pub fn OpenMM_HarmonicBondForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_HarmonicBondForce,
    ) -> OpenMM_Boolean;
}
pub const OpenMM_CustomGBForce_NonbondedMethod_OpenMM_CustomGBForce_NoCutoff:
    OpenMM_CustomGBForce_NonbondedMethod = 0;
pub const OpenMM_CustomGBForce_NonbondedMethod_OpenMM_CustomGBForce_CutoffNonPeriodic:
    OpenMM_CustomGBForce_NonbondedMethod = 1;
pub const OpenMM_CustomGBForce_NonbondedMethod_OpenMM_CustomGBForce_CutoffPeriodic:
    OpenMM_CustomGBForce_NonbondedMethod = 2;
pub type OpenMM_CustomGBForce_NonbondedMethod = u32;
pub const OpenMM_CustomGBForce_ComputationType_OpenMM_CustomGBForce_SingleParticle:
    OpenMM_CustomGBForce_ComputationType = 0;
pub const OpenMM_CustomGBForce_ComputationType_OpenMM_CustomGBForce_ParticlePair:
    OpenMM_CustomGBForce_ComputationType = 1;
pub const OpenMM_CustomGBForce_ComputationType_OpenMM_CustomGBForce_ParticlePairNoExclusions:
    OpenMM_CustomGBForce_ComputationType = 2;
pub type OpenMM_CustomGBForce_ComputationType = u32;
extern "C" {
    pub fn OpenMM_CustomGBForce_create() -> *mut OpenMM_CustomGBForce;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_destroy(target: *mut OpenMM_CustomGBForce);
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumParticles(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumExclusions(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumPerParticleParameters(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumGlobalParameters(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumEnergyParameterDerivatives(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumTabulatedFunctions(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumFunctions(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumComputedValues(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNumEnergyTerms(
        target: *const OpenMM_CustomGBForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getNonbondedMethod(
        target: *const OpenMM_CustomGBForce,
    ) -> OpenMM_CustomGBForce_NonbondedMethod;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setNonbondedMethod(
        target: *mut OpenMM_CustomGBForce,
        method: OpenMM_CustomGBForce_NonbondedMethod,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getCutoffDistance(target: *const OpenMM_CustomGBForce) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setCutoffDistance(target: *mut OpenMM_CustomGBForce, distance: f64);
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addPerParticleParameter(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getPerParticleParameterName(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setPerParticleParameterName(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addGlobalParameter(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getGlobalParameterName(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setGlobalParameterName(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addEnergyParameterDerivative(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getEnergyParameterDerivativeName(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addParticle(
        target: *mut OpenMM_CustomGBForce,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getParticleParameters(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setParticleParameters(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addComputedValue(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
        type_: OpenMM_CustomGBForce_ComputationType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getComputedValueParameters(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        expression: *mut *mut ::std::os::raw::c_char,
        type_: *mut OpenMM_CustomGBForce_ComputationType,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setComputedValueParameters(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
        type_: OpenMM_CustomGBForce_ComputationType,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addEnergyTerm(
        target: *mut OpenMM_CustomGBForce,
        expression: *const ::std::os::raw::c_char,
        type_: OpenMM_CustomGBForce_ComputationType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getEnergyTermParameters(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        expression: *mut *mut ::std::os::raw::c_char,
        type_: *mut OpenMM_CustomGBForce_ComputationType,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setEnergyTermParameters(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        expression: *const ::std::os::raw::c_char,
        type_: OpenMM_CustomGBForce_ComputationType,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addExclusion(
        target: *mut OpenMM_CustomGBForce,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getExclusionParticles(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        particle1: *mut ::std::os::raw::c_int,
        particle2: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setExclusionParticles(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        particle1: ::std::os::raw::c_int,
        particle2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addTabulatedFunction(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
        function: *mut OpenMM_TabulatedFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getTabulatedFunction(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> *mut OpenMM_TabulatedFunction;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getTabulatedFunctionName(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_addFunction(
        target: *mut OpenMM_CustomGBForce,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomGBForce_getFunctionParameters(
        target: *const OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        values: *mut OpenMM_DoubleArray,
        min: *mut f64,
        max: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_setFunctionParameters(
        target: *mut OpenMM_CustomGBForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        values: *const OpenMM_DoubleArray,
        min: f64,
        max: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_updateParametersInContext(
        target: *mut OpenMM_CustomGBForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomGBForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomGBForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_RMSDForce_create(
        referencePositions: *const OpenMM_Vec3Array,
        particles: *const OpenMM_IntArray,
    ) -> *mut OpenMM_RMSDForce;
}
extern "C" {
    pub fn OpenMM_RMSDForce_destroy(target: *mut OpenMM_RMSDForce);
}
extern "C" {
    pub fn OpenMM_RMSDForce_getReferencePositions(
        target: *const OpenMM_RMSDForce,
    ) -> *const OpenMM_Vec3Array;
}
extern "C" {
    pub fn OpenMM_RMSDForce_setReferencePositions(
        target: *mut OpenMM_RMSDForce,
        positions: *const OpenMM_Vec3Array,
    );
}
extern "C" {
    pub fn OpenMM_RMSDForce_getParticles(target: *const OpenMM_RMSDForce)
        -> *const OpenMM_IntArray;
}
extern "C" {
    pub fn OpenMM_RMSDForce_setParticles(
        target: *mut OpenMM_RMSDForce,
        particles: *const OpenMM_IntArray,
    );
}
extern "C" {
    pub fn OpenMM_RMSDForce_updateParametersInContext(
        target: *mut OpenMM_RMSDForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_RMSDForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_RMSDForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_create(
        energy: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_CustomExternalForce;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_destroy(target: *mut OpenMM_CustomExternalForce);
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getNumParticles(
        target: *const OpenMM_CustomExternalForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getNumPerParticleParameters(
        target: *const OpenMM_CustomExternalForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getNumGlobalParameters(
        target: *const OpenMM_CustomExternalForce,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getEnergyFunction(
        target: *const OpenMM_CustomExternalForce,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_setEnergyFunction(
        target: *mut OpenMM_CustomExternalForce,
        energy: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_addPerParticleParameter(
        target: *mut OpenMM_CustomExternalForce,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getPerParticleParameterName(
        target: *const OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_setPerParticleParameterName(
        target: *mut OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_addGlobalParameter(
        target: *mut OpenMM_CustomExternalForce,
        name: *const ::std::os::raw::c_char,
        defaultValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getGlobalParameterName(
        target: *const OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_setGlobalParameterName(
        target: *mut OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getGlobalParameterDefaultValue(
        target: *const OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_setGlobalParameterDefaultValue(
        target: *mut OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
        defaultValue: f64,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_addParticle(
        target: *mut OpenMM_CustomExternalForce,
        particle: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_getParticleParameters(
        target: *const OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
        particle: *mut ::std::os::raw::c_int,
        parameters: *mut OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_setParticleParameters(
        target: *mut OpenMM_CustomExternalForce,
        index: ::std::os::raw::c_int,
        particle: ::std::os::raw::c_int,
        parameters: *const OpenMM_DoubleArray,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_updateParametersInContext(
        target: *mut OpenMM_CustomExternalForce,
        context: *mut OpenMM_Context,
    );
}
extern "C" {
    pub fn OpenMM_CustomExternalForce_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CustomExternalForce,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Continuous2DFunction_create(
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
        xmin: f64,
        xmax: f64,
        ymin: f64,
        ymax: f64,
    ) -> *mut OpenMM_Continuous2DFunction;
}
extern "C" {
    pub fn OpenMM_Continuous2DFunction_destroy(target: *mut OpenMM_Continuous2DFunction);
}
extern "C" {
    pub fn OpenMM_Continuous2DFunction_getFunctionParameters(
        target: *const OpenMM_Continuous2DFunction,
        xsize: *mut ::std::os::raw::c_int,
        ysize: *mut ::std::os::raw::c_int,
        values: *mut OpenMM_DoubleArray,
        xmin: *mut f64,
        xmax: *mut f64,
        ymin: *mut f64,
        ymax: *mut f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous2DFunction_setFunctionParameters(
        target: *mut OpenMM_Continuous2DFunction,
        xsize: ::std::os::raw::c_int,
        ysize: ::std::os::raw::c_int,
        values: *const OpenMM_DoubleArray,
        xmin: f64,
        xmax: f64,
        ymin: f64,
        ymax: f64,
    );
}
extern "C" {
    pub fn OpenMM_Continuous2DFunction_Copy(
        target: *const OpenMM_Continuous2DFunction,
    ) -> *mut OpenMM_Continuous2DFunction;
}
extern "C" {
    pub fn OpenMM_CMMotionRemover_create(
        frequency: ::std::os::raw::c_int,
    ) -> *mut OpenMM_CMMotionRemover;
}
extern "C" {
    pub fn OpenMM_CMMotionRemover_destroy(target: *mut OpenMM_CMMotionRemover);
}
extern "C" {
    pub fn OpenMM_CMMotionRemover_getFrequency(
        target: *const OpenMM_CMMotionRemover,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_CMMotionRemover_setFrequency(
        target: *mut OpenMM_CMMotionRemover,
        freq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OpenMM_CMMotionRemover_usesPeriodicBoundaryConditions(
        target: *const OpenMM_CMMotionRemover,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Platform_destroy(target: *mut OpenMM_Platform);
}
extern "C" {
    pub fn OpenMM_Platform_registerPlatform(platform: *mut OpenMM_Platform);
}
extern "C" {
    pub fn OpenMM_Platform_getNumPlatforms() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenMM_Platform_getPlatform(index: ::std::os::raw::c_int) -> *mut OpenMM_Platform;
}
extern "C" {
    pub fn OpenMM_Platform_getPlatformByName(
        name: *const ::std::os::raw::c_char,
    ) -> *mut OpenMM_Platform;
}
extern "C" {
    pub fn OpenMM_Platform_findPlatform(
        kernelNames: *const OpenMM_StringArray,
    ) -> *mut OpenMM_Platform;
}
extern "C" {
    pub fn OpenMM_Platform_loadPluginLibrary(file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OpenMM_Platform_getDefaultPluginsDirectory() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_Platform_getOpenMMVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_Platform_getName(target: *const OpenMM_Platform)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_Platform_getSpeed(target: *const OpenMM_Platform) -> f64;
}
extern "C" {
    pub fn OpenMM_Platform_supportsDoublePrecision(
        target: *const OpenMM_Platform,
    ) -> OpenMM_Boolean;
}
extern "C" {
    pub fn OpenMM_Platform_getPropertyNames(
        target: *const OpenMM_Platform,
    ) -> *const OpenMM_StringArray;
}
extern "C" {
    pub fn OpenMM_Platform_getPropertyValue(
        target: *const OpenMM_Platform,
        context: *const OpenMM_Context,
        property: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_Platform_setPropertyValue(
        target: *const OpenMM_Platform,
        context: *mut OpenMM_Context,
        property: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_Platform_getPropertyDefaultValue(
        target: *const OpenMM_Platform,
        property: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenMM_Platform_setPropertyDefaultValue(
        target: *mut OpenMM_Platform,
        property: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OpenMM_Platform_supportsKernels(
        target: *const OpenMM_Platform,
        kernelNames: *const OpenMM_StringArray,
    ) -> OpenMM_Boolean;
}
